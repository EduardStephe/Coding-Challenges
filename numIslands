class Solution {
    /* Land is represented by '1'. Water is represented by '0'. */
    
    private int m;  // Rows.
    private int n;  // Columns
        
    
    public int numIslands(char[][] grid) {
        int islands = 0;                    // Counter.
        m = grid.length;
        if (m == 0){     // Grid is empty so there are no islands.
            return 0;
        } // if.
        n = grid[0].length;
        for(int i = 0; i < m; i++){         // Rows.
            for(int j = 0; j < n; j++){     // Columns.
                if(grid[i][j] == '1'){      // If the chosen element island.
                    DFSRemoval(grid, i, j); // Call method to remove land.
                    islands++;              // Removed land is counted.
                } // if.
            } // for.
        } // for.
        
        return islands;                     // Return counted island.
    } // numIslands.
    
    // Method uses depth first search to find other land in the grid while removing the land from the array to leave only water.
    private void DFSRemoval(char[][] grid, int i, int j){
        // Out of bounds or water.
        if (i < 0 || j < 0 || i >= m || j >= n || grid[i][j] != '1') return;
        
        // Mark current spot as water
        grid[i][j] = '0';
        
        // Recursive calls on all directions to remove land.
        DFSRemoval(grid, i + 1, j); // Down.
        DFSRemoval(grid, i - 1, j); // Up.
        DFSRemoval(grid, i, j + 1); // Right.
        DFSRemoval(grid, i, j - 1); // Left.
    } // DSF.
} // Solution.
